import telebot
import threading
import time
import re
import requests
from datetime import datetime, timedelta

import os
from dotenv import load_dotenv
import telebot

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
# üóÇÔ∏è –°–ø–∏—Å–∫–∏ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å —ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
reminders = []
user_locations = {}  # chat_id ‚Üí (lat, lon)

# üìç –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á üìÖ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —â–æ—Å—å —Ç–∏–ø—É:\n"
        "üëâ –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–∞–º–∏\n"
        "üëâ –∑—É—Å—Ç—Ä—ñ—á 12.09\n"
        "–Ü —è –Ω–∞–≥–∞–¥–∞—é —Ç–æ–±—ñ —É —Ü–µ–π –¥–µ–Ω—å + –Ω–∞–¥—ñ—à–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏!\n\n"
        "–©–æ–± –ø—Ä–æ–≥–Ω–æ–∑ –±—É–≤ —Ç–æ—á–Ω–∏–º ‚Äî –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ:\n"
        "üìù –ø—Ä–∏–∫–ª–∞–¥: \"–º—ñ—Å—Ç–æ –ù—å—é-–ô–æ—Ä–∫\", \"–≥–æ—Ä–æ–¥ –ù—å—é-–ô–æ—Ä–∫\", \"city New York\"\n"
        "–ê–±–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Ç–∞–π: \"–ø–æ–≥–æ–¥–∞ –ö–∏—ó–≤\""
    )

# üìÖ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç—É
def extract_date(text):
    text = text.lower()
    today = datetime.now().date()

    if "–∑–∞–≤—Ç—Ä–∞" in text:
        return today + timedelta(days=1)

    months = {
        '—Å—ñ—á–Ω—è': 1, '–ª—é—Ç–æ–≥–æ': 2, '–±–µ—Ä–µ–∑–Ω—è': 3, '–∫–≤—ñ—Ç–Ω—è': 4,
        '—Ç—Ä–∞–≤–Ω—è': 5, '—á–µ—Ä–≤–Ω—è': 6, '–ª–∏–ø–Ω—è': 7, '—Å–µ—Ä–ø–Ω—è': 8,
        '–≤–µ—Ä–µ—Å–Ω—è': 9, '–∂–æ–≤—Ç–Ω—è': 10, '–ª–∏—Å—Ç–æ–ø–∞–¥–∞': 11, '–≥—Ä—É–¥–Ω—è': 12
    }

    match = re.search(r'(\d{1,2})[.\-/](\d{1,2})', text)
    if match:
        day, month = int(match.group(1)), int(match.group(2))
        try:
            return datetime(datetime.now().year, month, day).date()
        except:
            return None

    match = re.search(r'(\d{1,2})\s+(—Å—ñ—á–Ω—è|–ª—é—Ç–æ–≥–æ|–±–µ—Ä–µ–∑–Ω—è|–∫–≤—ñ—Ç–Ω—è|—Ç—Ä–∞–≤–Ω—è|—á–µ—Ä–≤–Ω—è|–ª–∏–ø–Ω—è|—Å–µ—Ä–ø–Ω—è|–≤–µ—Ä–µ—Å–Ω—è|–∂–æ–≤—Ç–Ω—è|–ª–∏—Å—Ç–æ–ø–∞–¥–∞|–≥—Ä—É–¥–Ω—è)', text)
    if match:
        day = int(match.group(1))
        month = months.get(match.group(2))
        try:
            return datetime(datetime.now().year, month, day).date()
        except:
            return None

    return None

# üó∫Ô∏è –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ñ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenStreetMap
def get_coordinates_by_city(city_name):
    url = f"https://nominatim.openstreetmap.org/search?format=json&q={city_name}"
    try:
        response = requests.get(url, headers={"User-Agent": "weather-bot"})
        data = response.json()
        if data:
            lat = float(data[0]['lat'])
            lon = float(data[0]['lon'])
            return lat, lon
    except:
        pass
    return None

# üå§ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ —á–µ—Ä–µ–∑ Open-Meteo
def get_weather_forecast(date_obj, lat=52.4420, lon=4.8292, hour=12):
    date_str = date_obj.strftime('%Y-%m-%d')
    hour_str = f"{hour:02d}:00"
    url = (
        f"https://api.open-meteo.com/v1/forecast?"
        f"latitude={lat}&longitude={lon}&hourly=temperature_2m,"
        f"relative_humidity_2m,wind_speed_10m&timezone=Europe/Amsterdam"
    )
    try:
        response = requests.get(url)
        data = response.json()
        target_time = f"{date_str}T{hour_str}"
        index = data['hourly']['time'].index(target_time)
        temp = data['hourly']['temperature_2m'][index]
        humidity = data['hourly']['relative_humidity_2m'][index]
        wind = data['hourly']['wind_speed_10m'][index]

        if temp >= 20 and humidity < 60:
            comment = "‚òÄ –ì–∞—Ä–Ω–∏–π –¥–µ–Ω—å! –ù–µ –∑–∞–±—É–¥—å –æ–∫—É–ª—è—Ä–∏ üòé"
        elif humidity > 80 or wind > 10:
            comment = "üåß –ú–æ–∂–µ –±—É—Ç–∏ –Ω–µ–ø–æ–≥–æ–¥–∞ ‚Äî –±—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–π!"
        else:
            comment = "üå§ –ó–≤–∏—á–∞–π–Ω–∞ –ø–æ–≥–æ–¥–∞, –≤—Å–µ –æ–∫!"

        return f"{temp}¬∞C, –≤–æ–ª–æ–≥—ñ—Å—Ç—å {humidity}%, –≤—ñ—Ç–µ—Ä {wind} –∫–º/–≥–æ–¥\n{comment}"
    except:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏"

# üí¨ –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.strip()

    # üèôÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –≤—Ä—É—á–Ω—É
    if any(text.lower().startswith(prefix) for prefix in ["–º—ñ—Å—Ç–æ ", "–≥–æ—Ä–æ–¥ ", "city "]):
        city_name = re.sub(r"^(–º—ñ—Å—Ç–æ|–≥–æ—Ä–æ–¥|city)\s+", "", text, flags=re.IGNORECASE).strip()
        coords = get_coordinates_by_city(city_name)
        if coords:
            user_locations[message.chat.id] = coords
            bot.send_message(message.chat.id, f"‚úÖ –ú—ñ—Å—Ç–æ \"{city_name}\" –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ \"{city_name}\"")
        return

    # üå¶ –ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏ –≤—Ä—É—á–Ω—É
    if text.lower().startswith("–ø–æ–≥–æ–¥–∞ "):
        city_name = text[7:].strip()
        coords = get_coordinates_by_city(city_name)
        if coords:
            user_locations[message.chat.id] = coords
            forecast = get_weather_forecast(datetime.now().date(), lat=coords[0], lon=coords[1])
            bot.send_message(message.chat.id, f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ \"{city_name}\":\n{forecast}")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ \"{city_name}\"")
        return

    # üìÖ –Ø–∫—â–æ —î –¥–∞—Ç–∞ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    date = extract_date(text)
    if date:
        reminders.append((message.chat.id, date, text))
        latlon = user_locations.get(message.chat.id, (52.4420, 4.8292))
        forecast = get_weather_forecast(date, lat=latlon[0], lon=latlon[1])
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ {date.strftime('%d.%m')}\n"
            f"üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏: {forecast}"
        )
    else:
        bot.send_message(
            message.chat.id,
            "ü§î –Ø –Ω–µ –∑–Ω–∞–π—à–æ–≤ –¥–∞—Ç—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n"
            "–ù–∞–ø–∏—à–∏ —â–æ—Å—å —Ç–∏–ø—É: \"–∑—É—Å—Ç—Ä—ñ—á 12.09\" –∞–±–æ \"–∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–∞–º–∏\"\n"
            "–ê–±–æ –≤–∫–∞–∂–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ: \"–º—ñ—Å—Ç–æ –ö–∏—ó–≤\"\n"
            "–ê–±–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Ç–∞–π: \"–ø–æ–≥–æ–¥–∞ –õ—å–≤—ñ–≤\""
        )

# üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å —â–æ–≥–æ–¥–∏–Ω–∏
def reminder_checker():
    while True:
        today = datetime.now().date()
        for r in reminders[:]:
            chat_id, r_date, text = r
            if r_date == today:
                bot.send_message(chat_id, f"üìå –°—å–æ–≥–æ–¥–Ω—ñ: {text}")
                reminders.remove(r)
        time.sleep(3600)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
threading.Thread(target=reminder_checker).start()
bot.polling()